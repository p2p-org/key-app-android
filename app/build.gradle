plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.appdistribution'
    id 'com.google.firebase.crashlytics'
}

apply from: "$project.rootDir/scripts/ktlint.gradle"
apply from: "$project.rootDir/scripts/versioning.gradle"

android {
    compileSdkVersion sdkCompileVersion

    defaultConfig {
        applicationId "org.p2p.wallet"
        minSdkVersion sdkMinVersion
        targetSdkVersion sdkTargetVersion
        versionCode VERSION_CODE
        versionName VERSION_NAME

        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk { abiFilters("armeabi-v7a", "x86_64", "arm64-v8a", "x86") }

        def apikeyPropertiesFile = rootProject.file("apikey.properties")
        def apikeyProperties = new Properties()
        if (apikeyPropertiesFile.canRead()) {
            apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))
            buildConfigField("String", "rpcPoolApiKey", apikeyProperties['rpcPoolApiKey'])
            buildConfigField("String", "moonpayKey", apikeyProperties['moonpayKey'])
            buildConfigField("String", "comparePublicKey", apikeyProperties['comparePublicKey'])
            buildConfigField("String", "intercomApiKey", apikeyProperties['intercomApiKey'])
            buildConfigField("String", "intercomAppId", apikeyProperties['intercomAppId'])
            buildConfigField("String", "amplitudeKey", apikeyProperties['amplitudeKey'])
        } else {
            logger.quiet "apikey.properties is not found, using empty keys!"
            buildConfigField("String", "rpcPoolApiKey", "\"\"")
            buildConfigField("String", "moonpayKey", "\"\"")
            buildConfigField("String", "comparePublicKey", "\"\"")
            buildConfigField("String", "intercomApiKey", "\"\"")
            buildConfigField("String", "intercomAppId", "\"\"")
            buildConfigField("String", "amplitudeKey", "\"\"")
        }
        buildConfigField("boolean", "CRASHLYTICS_ENABLED", "true")
        buildConfigField("boolean", "ANALYTICS_ENABLED", "false")
        buildConfigField("boolean", "KEY_DEV_NET_ENABLED", "true")
        buildConfigField("String", "TASK_NUMBER", "\"${taskNumber()}\"")

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    signingConfigs {
        release {
            file("../signing.properties").with { propFile ->
                if (propFile.canRead()) {
                    def properties = new Properties()
                    properties.load(new FileInputStream(propFile))

                    storeFile file(properties['keystorePath'])
                    storePassword properties['keystorePassword']
                    keyAlias properties['keyAlias']
                    keyPassword properties['keyPassword']
                } else {
                    logger.quiet 'Unable to read signing.properties, using defaults'
                }
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            versionNameSuffix ".$VERSION_BUILD-debug"
            buildConfigField("boolean", "CRASHLYTICS_ENABLED", "false")
        }

        feature {
            applicationIdSuffix ".feature"
            debuggable true
            signingConfig signingConfigs.debug
            minifyEnabled true
            shrinkResources true
            versionNameSuffix ".$VERSION_BUILD-feature"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            firebaseAppDistribution {
                releaseNotes = featureChangelog()
                groups = "wallet.feature.test"
            }

            firebaseCrashlytics {
                mappingFileUploadEnabled true
            }
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField("boolean", "ANALYTICS_ENABLED", "true")
            buildConfigField("boolean", "KEY_DEV_NET_ENABLED", "false")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    buildFeatures {
        viewBinding true
    }
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
        animationsDisabled = true
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }
}

dependencies {
    implementation project(path: ':solanaj')

    implementation "androidx.appcompat:appcompat:1.4.1"
    implementation "androidx.biometric:biometric:1.1.0"
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation "androidx.constraintlayout:constraintlayout:2.1.3"
    implementation 'androidx.activity:activity-ktx:1.4.0'
    implementation 'androidx.fragment:fragment-ktx:1.4.1'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation "com.google.android.material:material:1.5.0"
    implementation 'com.google.android.flexbox:flexbox:3.0.0'
    implementation "androidx.browser:browser:1.4.0"

    def coroutinesVersion = '1.6.0'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"

    // https://github.com/JakeWharton/timber
    implementation "com.jakewharton.timber:timber:5.0.1"
    // https://github.com/dm77/barcodescanner
    implementation 'me.dm7.barcodescanner:zxing:1.9.8'
    // https://github.com/JakeWharton/ThreeTenABP
    implementation 'com.jakewharton.threetenabp:threetenabp:1.3.0'

    def retrofitVersion = '2.9.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"

    def okHttpVersion = '4.9.3'
    implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"

    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:28.4.2')

    // Declare the dependencies for the Crashlytics and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics'

    implementation 'io.intercom.android:intercom-sdk-base:10.6.0'

    implementation 'com.amplitude:android-sdk:2.33.0'


    // Debug drawer
    def debugDrawerVersion = '0.8.0'
    implementation "io.palaima.debugdrawer:debugdrawer:$debugDrawerVersion"
    implementation "io.palaima.debugdrawer:debugdrawer-base:$debugDrawerVersion"
    implementation "io.palaima.debugdrawer:debugdrawer-commons:$debugDrawerVersion"
    implementation "io.palaima.debugdrawer:debugdrawer-timber:$debugDrawerVersion"


    // Glide
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    kapt 'com.github.bumptech.glide:compiler:4.12.0'
    implementation 'com.caverock:androidsvg-aar:1.4'

    // Room
    def roomVersion = '2.4.1'
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"

    // seed value
    implementation 'com.github.bitcoinj:bitcoinj:0.15.10'

    // https://github.com/InsertKoinIO/koin
    implementation "io.insert-koin:koin-android:3.1.5"

    // GeeTest
    implementation 'com.geetest.sensebot:sensebot:4.3.4.6'

    // core
    testImplementation 'androidx.test:core-ktx:1.4.0'
    testImplementation 'androidx.test.ext:junit-ktx:1.1.3'
    // https://github.com/mockk/mockk
    testImplementation 'io.mockk:mockk:1.12.0'
    // https://mvnrepository.com/artifact/junit/junit
    testImplementation 'junit:junit:4.13.2'
    // https://github.com/robolectric/robolectric
    testImplementation "org.robolectric:robolectric:4.5.1"
    // Coroutines support
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
}