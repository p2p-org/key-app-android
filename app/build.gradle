plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.appdistribution'
    id 'com.google.firebase.crashlytics'
    id "io.sentry.android.gradle" version "3.1.1"
}

apply from: "$project.rootDir/scripts/ktlint.gradle"
apply from: "$project.rootDir/scripts/versioning.gradle"
apply from: "$project.rootDir/scripts/properties.gradle"

android {
    compileSdkVersion sdkCompileVersion

    defaultConfig {
        applicationId "org.p2p.wallet"
        minSdkVersion sdkMinVersion
        targetSdkVersion sdkTargetVersion
        versionCode VERSION_CODE
        versionName VERSION_NAME

        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk { abiFilters("armeabi-v7a", "x86_64", "arm64-v8a", "x86") }

        initApiKeys(it)
        initSentry(it)
        checkForSslPinning()

        buildConfigField("boolean", "CRASHLYTICS_ENABLED", "true")
        buildConfigField("boolean", "AMPLITUDE_ENABLED", "false")
        buildConfigField("boolean", "KEY_DEV_NET_ENABLED", "true")
        buildConfigField("boolean", "SSL_PINNING_ENABLED", "false")
        buildConfigField("String", "TASK_NUMBER", "\"${taskNumber()}\"")

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        setProperty("archivesBaseName", getBuildAppFileName())
    }

    signingConfigs {
        debug {
            storeFile file("p2pwallet_debug.keystore")
            storePassword "Test2RAMzxGb"
            keyAlias "p2pwallet"
            keyPassword "Test2RAMzxGb"
        }
        release {
            def secretProperties = new Properties()

            def signingPropertiesFile = rootProject.file("signing.properties")
            if (signingPropertiesFile.canRead()) {
                logger.quiet "(SIGNING): using signing properties file"
                secretProperties.load(new FileInputStream(signingPropertiesFile))
                storeFile file(secretProperties['keystorePath'])
                storePassword secretProperties['keystorePassword']
                keyAlias secretProperties['keyAlias']
                keyPassword secretProperties['keyPassword']
            } else {
                logger.quiet "(SIGNING): using signing properties from CI"
                secretProperties["KEYSTORE_PASSWORD"] = "${System.getenv('KEYSTORE_PASSWORD')}"
                secretProperties["KEY_PASSWORD"] = "${System.getenv('KEY_PASSWORD')}"
                secretProperties["KEY_ALIAS"] = "${System.getenv('KEY_ALIAS')}"

                storeFile rootProject.file("p2p-wallet.jks")
                storePassword secretProperties["KEYSTORE_PASSWORD"]
                keyPassword secretProperties["KEY_PASSWORD"]
                keyAlias secretProperties["KEY_ALIAS"]
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            versionNameSuffix ".${getVersionBuild()}-debug"
            buildConfigField("boolean", "CRASHLYTICS_ENABLED", "false")
            manifestPlaceholders = [SENTRY_ENV: "debug"]
        }

        feature {
            applicationIdSuffix ".feature"
            debuggable true
            signingConfig signingConfigs.debug
            minifyEnabled true
            shrinkResources true
            versionNameSuffix ".${getVersionBuild()}-feature"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField("boolean", "AMPLITUDE_ENABLED", "true")
            manifestPlaceholders = [SENTRY_ENV: "feature"]
            matchingFallbacks = ['release']

            firebaseAppDistribution {
                artifactType = "APK"
                releaseNotes = featureChangelog()
                groups = "wallet.feature.test"
            }

            firebaseCrashlytics {
                mappingFileUploadEnabled true
            }
            matchingFallbacks = ["release"]
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField("boolean", "AMPLITUDE_ENABLED", "true")
            buildConfigField("boolean", "KEY_DEV_NET_ENABLED", "false")
            manifestPlaceholders = [SENTRY_ENV: "release"]

            firebaseAppDistribution {
                artifactType = "AAB"
                releaseNotes = releaseChangelog(VERSION_NAME)
                groups = "wallet.release.test"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = getBuildAppFileName() + "_${variant.buildType.name}" + ".apk"
        }
    }

    buildFeatures {
        viewBinding true
    }

    testOptions {
        unitTests.all { useJUnitPlatform() }
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
        animationsDisabled = true
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    sentry {
        // List the build types that should be ignored
        ignoredBuildTypes = ["debug"]
        autoInstallation {
            enabled = false
        }
    }
}

dependencies {
    implementation project(':solanaj')
    implementation project(':ui-kit')
    implementation files('libs/borshj-0.0.0.jar')

    implementation "androidx.appcompat:appcompat:1.5.1"
    implementation "androidx.biometric:biometric:1.1.0"
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    implementation 'androidx.activity:activity-ktx:1.6.0'
    implementation 'androidx.fragment:fragment-ktx:1.5.3'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.5.1'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation("com.google.android.material:material") {
        version { strictly "1.6.1" }
    }
    implementation "androidx.browser:browser:1.4.0"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    def coroutinesVersion = '1.6.2'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"

    def work_version = "2.7.1"
    implementation "androidx.work:work-runtime-ktx:$work_version"

    // https://github.com/JakeWharton/timber
    implementation "com.jakewharton.timber:timber:5.0.1"
    // https://github.com/dm77/barcodescanner
    implementation 'me.dm7.barcodescanner:zxing:1.9.8'
    // https://github.com/JakeWharton/ThreeTenABP
    implementation 'com.jakewharton.threetenabp:threetenabp:1.3.0'

    def retrofitVersion = '2.9.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"

    def okHttpVersion = '4.9.3'
    implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"

    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:28.4.2')

    // Declare the dependencies for the Crashlytics and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-messaging-ktx'
    implementation 'com.google.firebase:firebase-config'

    implementation 'io.intercom.android:intercom-sdk-base:10.6.0'

    implementation 'com.amplitude:android-sdk:2.35.3'

    implementation "com.google.android.gms:play-services-base:18.1.0"

    // Debug drawer
    def debugDrawerVersion = '0.8.0'
    implementation "io.palaima.debugdrawer:debugdrawer-timber:$debugDrawerVersion"

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    kapt 'com.github.bumptech.glide:compiler:4.12.0'
    implementation 'com.caverock:androidsvg-aar:1.4'

    // Room
    def roomVersion = '2.4.3'
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"

    // seed value
    implementation 'com.github.bitcoinj:bitcoinj:0.15.10'

    def koinVersion = '3.2.0'
    // https://github.com/InsertKoinIO/koin
    implementation "io.insert-koin:koin-android:$koinVersion"
    implementation "io.insert-koin:koin-androidx-workmanager:$koinVersion"

    // GeeTest
    implementation 'com.geetest.sensebot:sensebot:4.3.4.6'

    // Lottie
    def lottieVersion = '4.0.0'
    implementation "com.airbnb.android:lottie:$lottieVersion"

    // Sentry
    def sentryVersion = '6.1.3'
    implementation "io.sentry:sentry-android:$sentryVersion"
    implementation "io.sentry:sentry-android-fragment:$sentryVersion"
    implementation "io.sentry:sentry-android-core:$sentryVersion"
    implementation "io.sentry:sentry-android-okhttp:$sentryVersion"
    implementation "io.sentry:sentry-android-ndk:$sentryVersion"

    // dots indicator
    implementation "com.tbuonomo:dotsindicator:4.3"

    // Google Play Auth
    implementation 'com.google.android.gms:play-services-auth:20.3.0'

    //AppsFlyer
    implementation 'com.appsflyer:af-android-sdk:6.9.0'
    implementation "com.android.installreferrer:installreferrer:2.2"

    // TickerView
    implementation 'com.robinhood.ticker:ticker:2.0.4'
    implementation 'androidx.core:core-splashscreen:1.0.0'


    // core
    testImplementation 'androidx.test:core-ktx:1.4.0'
    testImplementation 'androidx.test.ext:junit-ktx:1.1.3'
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    // https://github.com/mockk/mockk
    testImplementation 'io.mockk:mockk:1.12.0'
    // https://mvnrepository.com/artifact/junit/junit
    testImplementation 'junit:junit:4.13.2'
    // https://github.com/robolectric/robolectric
    testImplementation "org.robolectric:robolectric:4.5.1"
    // Coroutines support
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
    // Koin Test features
    testImplementation "io.insert-koin:koin-test:$koinVersion"
    // Koin for JUnit 4
    testImplementation "io.insert-koin:koin-test-junit4:$koinVersion"

    testImplementation "org.assertj:assertj-core:3.22.0"
    testImplementation 'org.slf4j:slf4j-nop:1.7.30'

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.8.2"
    testImplementation "org.assertj:assertj-core:3.22.0"

    implementation 'com.github.RedMadRobot:input-mask-android:6.1.0'
    implementation 'io.michaelrocks:libphonenumber-android:8.12.52'

    testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.8.2") {
        because 'This lib comes shipped with the IDE and it possible that newer versions of JUnit 5 maybe be incompatible with the version of junit-platform-launcher shipped with the IDE.'
    }
    def junitJupiterVersion = "5.8.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$junitJupiterVersion"
}