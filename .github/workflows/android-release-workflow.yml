on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
jobs:
  android-lint:
    name: "Run ktlint check"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: ./.github/actions/setup-sentry
        with:
          auth-token: ${{ secrets.SENTRY_AUTH_TOKEN }}
          auth-dsn: ${{ secrets.SENTRY_AUTH_DSN }}
      - name: Run ktlint
        run: ./gradlew ktlint -PautoCorrect=0

  android-unit-tests:
    name: "Run unit tests"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Create and fill sentry.properties
        uses: ./.github/actions/setup-sentry
        with:
          auth-token: ${{ secrets.SENTRY_AUTH_TOKEN }}
          auth-dsn: ${{ secrets.SENTRY_AUTH_DSN  }}

      - uses: ./.github/actions/setup-gradle

      - uses: actions/setup-java@v1
        with: { java-version: 11 }

      - name: Setup google-json from secrets
        env:
          FIREBASE_SECRET: ${{ secrets.GOOGLE_SERVICE_JSON_SECRET }}
        run: echo $FIREBASE_SECRET > app/google-services.json

      - name: Create and fill cert.pem certificate for SSL pinning
        env:
          SSL_CERTIFICATE: ${{ secrets.SSL_CERTIFICATE }}
        run: echo $SSL_CERTIFICATE -> app/src/main/res/raw/cert.pem

      - name: Run unit tests
        run: ./gradlew testDebug

  android-build-artifacts:
    name: "Run build release artifacts"
    needs:
      - android-lint
      - android-unit-tests

    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: "Checkout to the current commit hash"
        uses: actions/checkout@v2

      - name: "Send start deploy message to slack"
        run: |
          git fetch
          cd bash_scripts
          bash slack_deploy_start_message.sh ${{ secrets.SLACK_BOT_TOKEN }} ${{ secrets.SLACK_CHANNEL_ID }}
          cd ..

      - name: "Create Firebase App file"
        uses: ./.github/actions/setup-firebase
        with:
          firebase-secret: ${{ secrets.GOOGLE_SERVICE_JSON_SECRET }}

      - name: "Create apikey.properties"
        uses: ./.github/actions/setup-apikey
        with:
          rpc-pool-secret: ${{ secrets.RPC_POOL_API_KEY }}
          moonpay-secret: ${{ secrets.MOONPAY_KEY }}
          compare-secret: ${{ secrets.COMPARE_PUBLIC_KEY }}
          intercom-id-secret: ${{ secrets.INTERCOM_APP_ID }}
          intercom-key-secret: ${{ secrets.INTERCOM_API_KEY }}
          amplitude-secret: ${{ secrets.AMPLITUDE_KEY }}

      - name: "Create cert.pem file"
        env:
          SSL_CERTIFICATE: ${{ secrets.SSL_CERTIFICATE }}
        run: echo $SSL_CERTIFICATE -> app/src/main/res/raw/cert.pem

      - name: "Create sentry.property file"
        uses: ./.github/actions/setup-sentry
        with:
          auth-token: ${{ secrets.SENTRY_AUTH_TOKEN }}
          auth-dsn: ${{ secrets.SENTRY_AUTH_DSN }}

      - name: "Setup gradle"
        uses: ./.github/actions/setup-gradle

      - name: "Setup signing.properties"
        uses: ./.github/actions/setup-keystore
        with:
          keystore-secret: ${{ secrets.KEYSTORE_SECRET }}
          keystore-password: ${{ secrets.KEYSTORE_PASSWORD }}
          key-alias: ${{ secrets.KEY_ALIAS }}
          key-password: ${{ secrets.KEY_PASSWORD }}

      - name: "Build Bundle artifact"
        run: ./gradlew assembleRelease bundleRelease

      - name: "Upload APK to Firebase App Distribution"
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
        run: ./gradlew appDistributionUploadRelease

      - name: "Upload APK to Slack Channel"
        uses: ./.github/actions/setup-slack
        with:
          bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          build-type: "release"
          artifact-type: "bundle"

      - name: "Upload changelog, and Jira ticket to slack channel"
        run: |
          cd bash_scripts
          value=`cat timestamp.txt`
          bash slack_deploy_jira_ticket.sh ${{ secrets.SLACK_BOT_TOKEN }} ${{ secrets.SLACK_CHANNEL_ID }} $value
          bash slack_deploy_changelog.sh ${{ secrets.SLACK_BOT_TOKEN }} ${{ secrets.SLACK_CHANNEL_ID }}
          cd ..

      - name: "Send finish deploy message to slack"
        run: |
          cd bash_scripts
          value=`cat timestamp.txt`
          bash slack_deploy_finish_message.sh ${{ secrets.SLACK_BOT_TOKEN }} ${{ secrets.SLACK_CHANNEL_ID }} $value