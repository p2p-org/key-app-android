version: 2.1

orbs:
  android: circleci/android@2.0

commands:
  save_test_results:
    description: "Saves all test results into a single directory"
    steps:
      - run:
          name: "Save test results"
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  create_api_keys_file:
    description: "Create apikey.properties"
    steps:
      - run:
          name: "Create apikey.properties and fill them"
          command: |
            touch apikey.properties
            echo "rpcPoolApiKey=\"${RPC_POOL_API_KEY}\"" >> apikey.properties
            echo "moonpayKey=\"${MOONPAY_KEY}\"" >> apikey.properties
            echo "comparePublicKey=\"${COMPARE_PUBLIC_KEY}\"" >> apikey.properties
            echo "intercomApiKey=\"${INTERCOM_API_KEY}\"" >> apikey.properties
            echo "intercomAppId=\"${INTERCOM_APP_ID}\"" >> apikey.properties
            echo "amplitudeKey=\"${AMPLITUDE_KEY}\"" >> apikey.properties
            echo "apikey.properties created succesfully"

  create_sentry_properties_file:
    description: "Create sentry.properties for gradle plugin"
    steps:
      - run:
          name: "Create sentry.properties from hex"
          command: |
            echo "$SENTRY_PROPERTIES_HEX" | xxd -r -p - > sentry.properties

  restore_gradle_cache:
    description: "Try and use .gradle cache"
    steps:
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

  upload_feature_apk_to_slack:
    description: "Upload `feature` app to Slack channel"
    steps:
      - run:
          name: "Upload using CURL request to Slack"
          command: |
            curl \
              -S -s -o /dev/null \
              -F token="${SLACK_BOT_TOKEN}" \
              -F channels="${P2P_SLACK_APK_CHANNEL_ID}" \
              -F initial_comment="Hey! Here is the feature APK. Success :tada:" \
              -F "file=@$(find app/build/outputs/apk/feature -name 'p2p*')" \
              https://slack.com/api/files.upload

  upload_release_bundle_to_slack:
    description: "Upload `release` bundle app to Slack channel"
    steps:
      - run:
          name: "Upload AAB using CURL request to Slack"
          command: |
            curl \
              -S -s -o /dev/null \
              -F token="${SLACK_BOT_TOKEN}" \
              -F channels="${P2P_SLACK_APK_CHANNEL_ID}" \
              -F initial_comment="Hey! Here is the release AAB. Success :tada:" \
              -F "file=@$(find app/build/outputs/bundle/release -name 'p2p*.aab')" \
              https://slack.com/api/files.upload

  upload_release_apk_to_slack:
    description: "Upload `release` APK app to Slack channel"
    steps:
      - run:
          name: "Upload APK using CURL request to Slack"
          command: |
            curl \
              -S -s -o /dev/null \
              -F token="${SLACK_BOT_TOKEN}" \
              -F channels="${P2P_SLACK_APK_CHANNEL_ID}" \
              -F initial_comment="Hey! Here is the release APK. Success :tada:" \
              -F "file=@$(find app/build/outputs/apk/release -name 'p2p*')" \
              https://slack.com/api/files.upload


  generate_build_version:
    description: "Update BUILD_VERSION >> gradle.properties"
    steps:
      - run:
          name: "Generate build version and write"
          command: |
            ./gradlew setVersionBuild -Pversion=${CIRCLE_BUILD_NUM}
            echo "Set build version to ${CIRCLE_BUILD_NUM}"


  fill_ssl_certificate:
    description: "Create and fill cert.pem certificate for SSL pinning"
    steps:
      - run:
          name: "Create and fill cert.pem"
          command: |
            touch app/src/main/res/raw/cert.pem
            echo ${SSL_CERTIFICATE} >> app/src/main/res/raw/cert.pem

  create_google_services_file:
    description: "Create and fill google-services.json"
    steps:
      - run:
          name: "Write google-services.json file from env"
          command: |
            echo "$GOOGLE_SERVICES_HEX" | xxd -r -p - > app/google-services.json

defaults: &defaults
  working_directory: ~/app
  executor:
    name: android/android-machine
    resource-class: large
    tag: 2021.10.1

filter_feature_branch_only: &filter_feature_branch_only
  filters:
    branches:
      only:
        - /(^feature\/.+)/

filter_develop_branch_only: &filter_develop_branch_only
  filters:
    branches:
      only:
        - develop

filter_release_branch_only: &filter_release_branch_only
  filters:
    branches:
      only:
        - /(^release\/.+)/
        - /(^hotfix\/.+)/

jobs:
  android_lint:
    <<: *defaults
    steps:
      - checkout
      - create_sentry_properties_file
      - create_api_keys_file
      - run:
          name: "Static analysis"
          command: ./gradlew ktlint -PautoCorrect=0 --stacktrace

  unit_tests:
    <<: *defaults
    steps:
      - checkout
      - restore_gradle_cache
      - create_api_keys_file
      - create_sentry_properties_file
      - fill_ssl_certificate # needed for Koin graph unit test
      - create_google_services_file
      - android/run-tests:
          test-command: ./gradlew testDebug
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - save_test_results

  publish_feature:
    <<: *defaults
    steps:
      - checkout
      - restore_gradle_cache
      - create_sentry_properties_file
      - create_api_keys_file
      - fill_ssl_certificate
      - create_google_services_file
      - generate_build_version
      - store_artifacts:
          path: "./app/gradle.properties"
          destination: gradle.properties
      - run:
          name: "Assemble and upload to Firebase App Distribution"
          command: ./gradlew assembleFeature appDistributionUploadFeature
      - upload_feature_apk_to_slack
      - store_artifacts:
          path: app/build/outputs/apk/feature

  publish_release:
    <<: *defaults
    steps:
      - checkout
      - restore_gradle_cache
      - create_sentry_properties_file
      - create_api_keys_file
      - fill_ssl_certificate
      - create_google_services_file
      - generate_build_version
      - run:
          name: "Generate build version"
          command: |
            ./gradlew setVersionBuild -Pversion=${CIRCLE_BUILD_NUM}
            echo "Set build version to ${CIRCLE_BUILD_NUM}"
      - store_artifacts:
          path: "./app/gradle.properties"
          destination: gradle.properties
      - run:
          name: "Write signing JKS file from env"
          command: |
            echo "$SIGNING_JKS_FILE_HEX" | xxd -r -p - > p2p-wallet.jks
      - run:
          name: "Bundle and upload release to Firebase App Distribution"
          command: ./gradlew assembleRelease bundleRelease appDistributionUploadRelease
      - upload_release_bundle_to_slack
      - upload_release_apk_to_slack
      - store_artifacts:
          path: app/build/outputs/bundle/release

workflows:
  version: 2

  lint_test_and_publish_feature:
    jobs:
      - android_lint:
          context: feature
          <<: *filter_feature_branch_only
      - unit_tests:
          context: feature
          <<: *filter_feature_branch_only
      - approve-feature-build:
          type: approval
          requires:
            - unit_tests
            - android_lint
      - publish_feature:
          context: feature
          requires:
            - approve-feature-build

  lint_test_develop:
    jobs:
      - android_lint:
          <<: *filter_develop_branch_only
      - unit_tests:
          <<: *filter_develop_branch_only

  publish_develop:
    jobs:
      - approve-develop-build:
          type: approval
          <<: *filter_develop_branch_only
      - publish_feature:
          context: feature
          requires:
            - approve-develop-build

  lint_test_and_publish_release:
    jobs:
      - android_lint:
          context: release
          <<: *filter_release_branch_only
      - unit_tests:
          context: release
          <<: *filter_release_branch_only
      - approve-release-build:
          type: approval
          requires:
            - android_lint
            - unit_tests
      - publish_release:
          context: release
          requires:
            - approve-release-build