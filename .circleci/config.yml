version: 2.1

orbs:
  android: circleci/android@2.0

commands:
  save_test_results:
    description: "Saves all test results into a single directory"
    steps:
      - run:
          name: "Save test results"
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  create_api_keys_file:
    description: "Create apikey.properties"
    steps:
      - run:
          name: "Create apikey.properties and fill them"
          command: |
            touch apikey.properties
            echo 'rpcPoolApiKey="${RPC_POOL_API_KEY}"' >> apikey.properties
            echo 'moonpayKey="${MOONPAY_KEY}"' >> apikey.properties
            echo 'comparePublicKey="${COMPARE_PUBLIC_KEY}"' >> apikey.properties
            echo 'intercomApiKey="${INTERCOM_API_KEY}"' >> apikey.properties
            echo 'intercomAppId="${INTERCOM_APP_ID}"' >> apikey.properties
            echo 'amplitudeKey="${AMPLITUDE_KEY}"' >> apikey.properties
            echo "apikey.properties created succesfully"

  restore_gradle_cache:
    description: "Try and use .gradle cache"
    steps:
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

defaults: &defaults
  working_directory: ~/app
  executor:
    name: android/android-machine
    resource-class: large
    tag: 2021.10.1

filter_feature_branch_only: &filter_feature_branch_only
  filters:
    branches:
      only:
        - /(^feature\/.+)/

filter_develop_branch_only: &filter_develop_branch_only
  filters:
    branches:
      only:
        - develop

filter_release_branch_only: &filter_release_branch_only
  filters:
    branches:
      only:
        - /(^release\/.+)/
        - /(^hotfix\/.+)/

jobs:
  android_lint:
    <<: *defaults
    steps:
      - checkout
      - create_api_keys_file
      - run:
          name: "Static analysis"
          command: ./gradlew ktlint -PautoCorrect=0

  unit_tests:
    <<: *defaults
    steps:
      - checkout
      - restore_gradle_cache
      - create_api_keys_file
      - android/run-tests:
          test-command: ./gradlew testDebug
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - save_test_results

  publish_feature:
    <<: *defaults
    steps:
      - checkout
      - restore_gradle_cache
      - create_api_keys_file
      - run:
          name: "Generate build version"
          command: |
            ./gradlew setVersionBuild -Pversion=${CIRCLE_BUILD_NUM}
            echo "Set build version to ${CIRCLE_BUILD_NUM}"
      - store_artifacts:
          path: "./app/gradle.properties"
          destination: gradle.properties
      - run:
          name: "Distribute to Firebase App Distribution"
          command: ./gradlew assembleFeature appDistributionUploadFeature
      - store_artifacts:
          path: app/build/outputs/apk/feature

  publish_release:
    <<: *defaults
    steps:
      - checkout
      - restore_gradle_cache
      - create_api_keys_file
      - run:
          name: "Generate build version"
          command: |
            ./gradlew setVersionBuild -Pversion=${CIRCLE_BUILD_NUM}
            echo "Set build version to ${CIRCLE_BUILD_NUM}"
      - store_artifacts:
          path: "./app/gradle.properties"
          destination: gradle.properties
      - run:
          name: "Write signing jks file from env"
          command: |
            echo "$SIGNING_JKS_FILE_HEX" | xxd -r -p - > p2p-wallet.jks
      - run:
          name: "Distribute release to Firebase App Distribution"
          command: ./gradlew bundleRelease appDistributionUploadRelease
      - store_artifacts:
          path: app/build/outputs/apk/release

workflows:
  version: 2

  lint_test_and_publish_feature:
    jobs:
      - android_lint:
          context: feature
          <<: *filter_feature_branch_only
      - unit_tests:
          context: feature
          <<: *filter_feature_branch_only
      - approve-feature-build:
          type: approval
          requires:
            - unit_tests
            - android_lint
      - publish_feature:
          context: feature
          requires:
            - approve-feature-build

  lint_test_develop:
    jobs:
      - android_lint:
          <<: *filter_develop_branch_only
      - unit_tests:
          <<: *filter_develop_branch_only

  publish_develop:
    jobs:
      - approve-develop-build:
          type: approval
          <<: *filter_develop_branch_only
      - publish_feature:
          context: feature
          requires:
            - approve-develop-build

  lint_test_and_publish_release:
    jobs:
      - android_lint:
          context: release
          <<: *filter_release_branch_only
      - unit_tests:
          context: release
          <<: *filter_release_branch_only
      - approve-release-build:
          type: approval
          requires:
            - android_lint
            - unit_tests
      - publish_release:
          context: release
          requires:
            - approve-release-build