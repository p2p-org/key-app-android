ext.initReleaseType = { buildType ->
    buildType.minifyEnabled true
    buildType.shrinkResources true
    buildType.debuggable false

    buildType.buildConfigField("boolean", "AMPLITUDE_ENABLED", "true")
    buildType.buildConfigField("boolean", "KEY_DEV_NET_ENABLED", "false")
    buildType.buildConfigField("boolean", "SENTRY_ENABLED", "true")
    buildType.buildConfigField("boolean", "APPSFLYER_ENABLED", "true")
    buildType.buildConfigField("boolean", "FIREBASE_ANALYTICS_ENABLED", "true")
    buildType.manifestPlaceholders = [SENTRY_ENV: "release"]
}

ext.initApiKeys = { defaultConfig ->
    def apiKeysProperties = new PropertiesFile(rootProject.file("apikey.properties"), logger)

    defaultConfig.buildConfigField("String", "rpcPoolApiKey", "${apiKeysProperties.getOrThrow('rpcPoolApiKey')}")
    defaultConfig.buildConfigField("String", "moonpayKey", "${apiKeysProperties.getOrThrow('moonpayKey')}")
    defaultConfig.buildConfigField("String", "moonpaySandboxKey", "${apiKeysProperties.getOrThrow('moonpaySandboxKey')}")
    defaultConfig.buildConfigField("String", "comparePublicKey", "${apiKeysProperties.getOrThrow('comparePublicKey')}")
    defaultConfig.buildConfigField("String", "intercomApiKey", "${apiKeysProperties.getOrThrow('intercomApiKey')}")
    defaultConfig.buildConfigField("String", "intercomAppId", "${apiKeysProperties.getOrThrow('intercomAppId')}")
    defaultConfig.buildConfigField("String", "amplitudeKey", "${apiKeysProperties.getOrThrow('amplitudeKey')}")
    defaultConfig.buildConfigField("String", "appsFlyerKey", "${apiKeysProperties.getOrThrow('appsFlyerKey')}")
}

ext.initSentry = { defaultConfig ->
    def sentryProperties = new PropertiesFile(rootProject.file("sentry.properties"), logger)
    defaultConfig.manifestPlaceholders = [SENTRY_DSN: sentryProperties.getOrThrow("auth.dsn")]
}

ext.getTorusProperties = { ->
    def torusProperties = new Properties()

    def torusPropertiesFile = rootProject.file("torus.properties")
    if (torusPropertiesFile.canRead()) {
        logger.quiet "(TORUS): using torus properties file"
        torusProperties.load(new FileInputStream(torusPropertiesFile))
    } else {
        logger.quiet "(TORUS): using torus properties from CI"
        torusProperties["TORUS_VERIFIER_DEBUG"] = "${System.getenv('TORUS_VERIFIER_DEBUG')}"
        torusProperties["TORUS_VERIFIER_FEATURE"] = "${System.getenv('TORUS_VERIFIER_FEATURE')}"
        torusProperties["TORUS_VERIFIER_RELEASE"] = "${System.getenv('TORUS_VERIFIER_RELEASE')}"

        torusProperties["TORUS_SUB_VERIFIER_RELEASE_STORE"] = "${System.getenv('TORUS_SUB_VERIFIER_RELEASE_STORE')}"
        torusProperties["TORUS_SUB_VERIFIER_RELEASE_FIREBASE"] = "${System.getenv('TORUS_SUB_VERIFIER_RELEASE_FIREBASE')}"
        torusProperties["TORUS_SUB_VERIFIER_RELEASE_LOCAL"] = "${System.getenv('TORUS_SUB_VERIFIER_RELEASE_LOCAL')}"
    }

    return torusProperties
}