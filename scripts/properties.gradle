ext.initApiKeys = { defaultConfig ->
    def apiKeysProperties = new PropertiesFile(rootProject.file("apikey.properties"), logger)
    def emptyString = "\"\""

    defaultConfig.buildConfigField("String", "rpcPoolApiKey", "${apiKeysProperties.getOrDefault('rpcPoolApiKey', emptyString)}")
    defaultConfig.buildConfigField("String", "moonpayKey", "${apiKeysProperties.getOrDefault('moonpayKey', emptyString)}")
    defaultConfig.buildConfigField("String", "comparePublicKey", "${apiKeysProperties.getOrDefault('comparePublicKey', emptyString)}")
    defaultConfig.buildConfigField("String", "intercomApiKey", "${apiKeysProperties.getOrDefault('intercomApiKey', emptyString)}")
    defaultConfig.buildConfigField("String", "intercomAppId", "${apiKeysProperties.getOrDefault('intercomAppId', emptyString)}")
    defaultConfig.buildConfigField("String", "amplitudeKey", "${apiKeysProperties.getOrDefault('amplitudeKey', emptyString)}")
    defaultConfig.buildConfigField("String", "appsFlyerKey", "${apiKeysProperties.getOrDefault('appsFlyerKey', emptyString)}")
}

ext.initSentry = { defaultConfig ->
    def sentryProperties = new PropertiesFile(rootProject.file("sentry.properties"), logger)
    defaultConfig.manifestPlaceholders = [SENTRY_DSN: sentryProperties.getOrThrow("auth.dsn")]
}

ext.checkForSslPinning = { ->
    def sslCertificate = rootProject.file("app/src/main/res/raw/cert.pem")
    if (sslCertificate.exists() && sslCertificate.length() != 0) {
        logger.quiet "(SSL): PEM for SSL pinning is found"
    } else {
        logger.quiet "(SSL): PEM for SSL pinning is NOT found"
    }
}