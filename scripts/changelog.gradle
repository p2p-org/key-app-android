def sh = { args -> args.execute().text.trim() }

def gitSha = { sh('git rev-parse --short HEAD') }

def branchFullName = { System.getenv('CI_COMMIT_REF_NAME') ?: sh('git rev-parse --abbrev-ref HEAD') }

def branchName = { "${branchFullName().split('/').last().toString()}" }

def now = { new Date().format('HH:mm dd.MM.yyyy') }

def changelog = {
    def versionPattern = /(?=##.*)/
    def lines = file("${project.rootDir}/CHANGELOG.md").getText('UTF-8').split(versionPattern)
    if (lines.size() < 2) return "Changelog not found or has wrong format"
    return lines[1]
}

def branchChangelog = { sh("git log origin/${branchFullName()} --not origin/develop --pretty=format:%s --no-merges -n 100") }

ext.developChangelog = {
    return "Commit: ${gitSha()}\n" +
            "Time: ${now()}\n" +
            "Release Notes:\n" +
            changelog()
}

ext.featureChangelog = {
    return "Branch: ${branchName()}\n" +
            "Commit: ${gitSha()}\n" +
            "Time: ${now()}\n" +
            "Release Notes:\n" +
            branchChangelog()
}

ext.taskNumber = {
    List<String> branchNameWithSemi = branchName().split('-')
    String taskNumber = branchFullName() // P2PW-????-* | develop | master | release
    if (branchNameWithSemi.size() >= 2) {
        taskNumber = branchNameWithSemi.get(0) + "-" + branchNameWithSemi.get(1)
    }
    return taskNumber
}